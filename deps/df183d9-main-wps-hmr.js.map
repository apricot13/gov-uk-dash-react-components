{"version":3,"sources":["webpack:///./src/lib/components/CheckboxList.react.js"],"names":["CheckboxList","props","defaultProps","options","value","propTypes","PropTypes","oneOfType","arrayOf","string","number","bool","object","exact","label","node","isRequired","disabled","title","id","setProps","func"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACpC,sBACE,2DAAC,wDAAD,EAAmBA,KAAnB,CADF;AAGA,CAJD;;AAMeD,2EAAf;AAEAA,YAAY,CAACE,YAAb,GAA4B;AACxBC,SAAO,EAAE,EADe;AAExBC,OAAK,EAAE;AAFiB,CAA5B;AAKAJ,YAAY,CAACK,SAAb,GAAyB;AACrB;AACJ;AACA;AACIF,SAAO,EAAEG,iDAAS,CAACC,SAAV,CAAoB;AACzB;AACR;AACA;AACQD,mDAAS,CAACE,OAAV,CACIF,iDAAS,CAACC,SAAV,CAAoB,CAChBD,iDAAS,CAACG,MADM,EAEhBH,iDAAS,CAACI,MAFM,EAGhBJ,iDAAS,CAACK,IAHM,CAApB,CADJ,CAJyB;AAWzB;AACR;AACA;AACA;AACA;AACA;AACQL,mDAAS,CAACM,MAjBe;AAkBzB;AACR;AACA;AACA;AACQN,mDAAS,CAACE,OAAV,CACIF,iDAAS,CAACO,KAAV,CAAgB;AACZ;AAChB;AACA;AACgBC,SAAK,EAAER,iDAAS,CAACS,IAAV,CAAeC,UAJV;;AAMZ;AAChB;AACA;AACA;AACA;AACgBZ,SAAK,EAAEE,iDAAS,CAACC,SAAV,CAAoB,CACvBD,iDAAS,CAACG,MADa,EAEvBH,iDAAS,CAACI,MAFa,EAGvBJ,iDAAS,CAACK,IAHa,CAApB,EAIJK,UAfS;;AAiBZ;AAChB;AACA;AACgBC,YAAQ,EAAEX,iDAAS,CAACK,IApBR;;AAsBZ;AAChB;AACA;AACA;AACA;AACgBO,SAAK,EAAEZ,iDAAS,CAACG;AA3BL,GAAhB,CADJ,CAtByB,CAApB,CAJY;;AA2DrB;AACJ;AACA;AACIL,OAAK,EAAEE,iDAAS,CAACE,OAAV,CACHF,iDAAS,CAACC,SAAV,CAAoB,CAChBD,iDAAS,CAACG,MADM,EAEhBH,iDAAS,CAACI,MAFM,EAGhBJ,iDAAS,CAACK,IAHM,CAApB,CADG,CA9Dc;;AAsErB;AACJ;AACA;AACA;AACA;AACIQ,IAAE,EAAEb,iDAAS,CAACG,MA3EO;;AA6ErB;AACJ;AACA;AACIW,UAAQ,EAAEd,iDAAS,CAACe;AAhFC,CAAzB;AAmFO,IAAMnB,YAAY,GAAGF,YAAY,CAACE,YAAlC;AACA,IAAMG,SAAS,GAAGL,YAAY,CAACK,SAA/B,C","file":"df183d9-main-wps-hmr.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CheckboxList as RealComponent } from '../LazyLoader';\r\n\r\n/**\r\n * Lazy loaded CheckboxList\r\n *\r\n * @param {\r\n * \tid,\r\n * \toptions,\r\n * \tvalue,\r\n * } [props={}]\r\n * @return {*}\r\n */\r\nconst CheckboxList = (props = {}) => {\r\n\treturn (\r\n\t\t\t<RealComponent {...props} />\r\n\t);\r\n}\r\n\r\nexport default CheckboxList\r\n\r\nCheckboxList.defaultProps = {    \r\n    options: [],\r\n    value: [],\r\n};\r\n\r\nCheckboxList.propTypes = {\r\n    /**\r\n     * An array of options\r\n     */\r\n    options: PropTypes.oneOfType([\r\n        /**\r\n         * Array of options where the label and the value are the same thing - [string|number|bool]\r\n         */\r\n        PropTypes.arrayOf(\r\n            PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number,\r\n                PropTypes.bool,\r\n            ])\r\n        ),\r\n        /**\r\n         * Simpler `options` representation in dictionary format. The order is not guaranteed.\r\n         * {`value1`: `label1`, `value2`: `label2`, ... }\r\n         * which is equal to\r\n         * [{label: `label1`, value: `value1`}, {label: `label2`, value: `value2`}, ...]\r\n         */\r\n        PropTypes.object,\r\n        /**\r\n         * An array of options {label: [string|number], value: [string|number]},\r\n         * an optional disabled field can be used for each option\r\n         */\r\n        PropTypes.arrayOf(\r\n            PropTypes.exact({\r\n                /**\r\n                 * The option's label\r\n                 */\r\n                label: PropTypes.node.isRequired,\r\n\r\n                /**\r\n                 * The value of the option. This value\r\n                 * corresponds to the items specified in the\r\n                 * `value` property.\r\n                 */\r\n                value: PropTypes.oneOfType([\r\n                    PropTypes.string,\r\n                    PropTypes.number,\r\n                    PropTypes.bool,\r\n                ]).isRequired,\r\n\r\n                /**\r\n                 * If true, this option is disabled and cannot be selected.\r\n                 */\r\n                disabled: PropTypes.bool,\r\n\r\n                /**\r\n                 * The HTML 'title' attribute for the option. Allows for\r\n                 * information on hover. For more information on this attribute,\r\n                 * see https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\r\n                 */\r\n                title: PropTypes.string,\r\n            })\r\n        ),\r\n    ]),\r\n\r\n    /**\r\n     * The currently selected value\r\n     */\r\n    value: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.number,\r\n            PropTypes.bool,\r\n        ])\r\n    ),   \r\n\r\n    /**\r\n     * The ID of this component, used to identify dash components\r\n     * in callbacks. The ID needs to be unique across all of the\r\n     * components in an app.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * Dash-assigned callback that gets fired when the value changes.\r\n     */\r\n    setProps: PropTypes.func,\r\n};\r\n\r\nexport const defaultProps = CheckboxList.defaultProps;\r\nexport const propTypes = CheckboxList.propTypes;"],"sourceRoot":""}